name: Update cloud infrastructure
run-name: Infrastructure Pipeline
on:
  push:
    paths:
      - 'Back\ End\ Files/**'
      - '.github/workflows/**'
      - 'terraform/**'
      - 'cypress/**'
      - '*.tf'

jobs:

  build:
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: 'actions/checkout@v3'

      #auth so we can use gcloud
      - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: 'projects/356251802763/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'github-actions-sa@resume-challenge-kyle-3.iam.gserviceaccount.com'



      # #python code has to be zipped before being deployed
      # - name: Zip python code
      #   run: cd Back\ End\ Files/gcpfunction/ && zip -r code.zip * && cd ../../..

      # #publish the zipped python code in the bucket using gcloud
      # - name: upload the zipped file to a bucket so it can be deployed
      #   run: gcloud storage cp Back\ End\ Files/gcpfunction/code.zip gs://resume-function-code-bucket/

      # #publish the artifact in the bucket using gcloud
      # - name: upload base64 zipped file to a bucket so it can be deployed
      #   run: gcloud storage cp Back\ End\ Files/APIGateway/openapi2-functions.yaml gs://resume-function-code-bucket/

  vulnerability-scan:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: write

    steps:
      - name: Checkout
        uses: 'actions/checkout@v3'

      #auth so we can use gcloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/585423355911/locations/global/workloadIdentityPools/githubpool/providers/providerid'
          service_account: 'sa-githubpublish@strange-cycle-371319.iam.gserviceaccount.com'

      #vuln scan the deployment terraform
      - name: Run Checkov action
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/deploy/
          soft_fail: true # optional: do not return an error code if there are failed checks
          framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          output_format: cli # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          output_file_path: vuln-scan-reports/vulnscan-deploy-results.sarif # folder and name of results file
          download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          log_level: DEBUG # optional: set log level. Default WARNING
          #config_file: path/this_file

      #vuln scan the build terraform
      - name: Run Checkov action
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/publish-artifacts/
          soft_fail: true # optional: do not return an error code if there are failed checks
          framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          output_format: cli # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          output_file_path: vuln-scan-reports/vulnscan-build-results.sarif # folder and name of results file
          download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          log_level: DEBUG # optional: set log level. Default WARNING
          #config_file: path/this_file

      #publish the checkov scan to a bucket using gcloud
      # - name: upload checkov results to bucket
      #   run: gcloud storage cp -r vuln-scan-reports/ gs://resume-function-code-bucket/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: write      

    steps:
      - name: Checkout
        uses: 'actions/checkout@v3'

      #auth so we can use gcloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/356251802763/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions-sa@resume-challenge-kyle-3.iam.gserviceaccount.com'

      #auth and setup to terraform cloud
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}

      #create a bucket where we can store our artifacts
      - name: Apply Infrastructure Terraform 
        run: cd infra; terraform init; terraform apply -auto-approve

      # - name: Terraform Destroy old stuff
      #   run: cd terraform/publish-artifacts; terraform init; terraform destroy -auto-approve; 


      # #add a comment if there's a merge request
      # - name: Update Pull Request comment
      #   uses: actions/github-script@v6
      #   if: ${{ github.event_name == 'pull_request' }}
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
 
      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })


  end-to-end-test:
    needs: deploy
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v3

      # Install NPM dependencies, cache them correctly
      # and run all Cypress tests

      # - name: Cypress run
      #   id: cypress_test
      #   uses: cypress-io/github-action@v5 # use the explicit version number
